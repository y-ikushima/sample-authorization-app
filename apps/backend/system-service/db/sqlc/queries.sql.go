// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSystem = `-- name: GetSystem :one
SELECT id, name, note FROM system WHERE id = $1
`

func (q *Queries) GetSystem(ctx context.Context, id string) (System, error) {
	row := q.db.QueryRow(ctx, getSystem, id)
	var i System
	err := row.Scan(&i.ID, &i.Name, &i.Note)
	return i, err
}

const getSystemAccounts = `-- name: GetSystemAccounts :many
SELECT t1.id, t1.name, t1.note, t2.id, t2.system_id, t2.user_id 
FROM system t1 
LEFT JOIN system_user_relation t2 ON t1.id = t2.system_id 
WHERE t1.id = $1
`

type GetSystemAccountsRow struct {
	ID       string
	Name     string
	Note     string
	ID_2     pgtype.Text
	SystemID pgtype.Text
	UserID   pgtype.Text
}

func (q *Queries) GetSystemAccounts(ctx context.Context, id string) ([]GetSystemAccountsRow, error) {
	rows, err := q.db.Query(ctx, getSystemAccounts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemAccountsRow
	for rows.Next() {
		var i GetSystemAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Note,
			&i.ID_2,
			&i.SystemID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystems = `-- name: GetSystems :many
SELECT id, name, note FROM system
`

func (q *Queries) GetSystems(ctx context.Context) ([]System, error) {
	rows, err := q.db.Query(ctx, getSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(&i.ID, &i.Name, &i.Note); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
