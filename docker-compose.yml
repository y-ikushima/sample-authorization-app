version: "3"

networks:
  authorization-network:
    driver: bridge

services:
  system_postgres:
    networks:
      - authorization-network
    container_name: system_postgres
    image: postgres:16.1
    restart: always
    env_file:
      - .env.local
    volumes:
      - ./postgres/system:/var/lib/postgresql/data
      - ./query/system/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  aws_postgres:
    networks:
      - authorization-network
    container_name: aws_postgres
    image: postgres:16.1
    restart: always
    env_file:
      - .env.local
    volumes:
      - ./postgres/aws:/var/lib/postgresql/data
      - ./query/aws/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  user_postgres:
    networks:
      - authorization-network
    container_name: user_postgres
    image: postgres:16.1
    restart: always
    env_file:
      - .env.local
    volumes:
      - ./postgres/user:/var/lib/postgresql/data
      - ./query/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5435:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  aws-service:
    networks:
      - authorization-network
    container_name: aws-service
    build:
      context: .
      dockerfile: ./apps/backend/aws-service/Dockerfile.dev
    env_file:
      - .env.local
    ports:
      - 3003:3003
    volumes:
      - ./apps/backend/aws-service:/app
    depends_on:
      aws_postgres:
        condition: service_healthy

  system-service:
    networks:
      - authorization-network
    container_name: system-service
    build:
      context: .
      dockerfile: ./apps/backend/system-service/Dockerfile.dev
    env_file:
      - .env.local
    ports:
      - 3004:3003
    volumes:
      - ./apps/backend/system-service:/app
    depends_on:
      system_postgres:
        condition: service_healthy

  user-service:
    networks:
      - authorization-network
    container_name: user-service
    build:
      context: .
      dockerfile: ./apps/backend/user-service/Dockerfile.dev
    env_file:
      - .env.local
    ports:
      - 3005:3003
    volumes:
      - ./apps/backend/user-service:/app
    depends_on:
      user_postgres:
        condition: service_healthy

  aws-web:
    networks:
      - authorization-network
    container_name: aws-web
    env_file:
      - .env.local
    build:
      context: ./apps/frontend/aws-web
      dockerfile: Dockerfile.dev
    ports:
      - 3000:3000
    volumes:
      - ./apps/frontend/aws-web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - aws-service

  system-web:
    networks:
      - authorization-network
    container_name: system-web
    env_file:
      - .env.local
    build:
      context: ./apps/frontend/system-web
      dockerfile: Dockerfile.dev
    ports:
      - 3001:3000
    volumes:
      - ./apps/frontend/system-web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - system-service

  # Casbin Authorization Server
  casbin-server:
    networks:
      - authorization-network
    container_name: casbin-server
    env_file:
      - .env.local
    build:
      context: ./authorization/casbin
      dockerfile: Dockerfile.dev
    ports:
      - 8080:8080
    environment:
      - PORT=8080
    volumes:
      - ./authorization/casbin/data:/app/data
    restart: unless-stopped

  # OPA Authorization Server
  opa-server:
    networks:
      - authorization-network
    container_name: opa-server
    env_file:
      - .env.local
    build:
      context: ./authorization/opa
      dockerfile: Dockerfile.dev
    ports:
      - 8081:8081
    environment:
      - PORT=8081
    volumes:
      - ./authorization/opa:/app
    restart: unless-stopped

  # SpiceDB Authorization Server
  spicedb-server:
    networks:
      - authorization-network
    container_name: spicedb-server
    env_file:
      - .env.local
    build:
      context: ./authorization/spicedb
      dockerfile: Dockerfile.dev
    ports:
      - 8082:8082
    environment:
      - PORT=8082
    depends_on:
      spicedb_postgres:
        condition: service_healthy
    volumes:
      - ./authorization/spicedb:/app
    restart: unless-stopped

  # SpiceDB Postgres Database
  spicedb_postgres:
    networks:
      - authorization-network
    container_name: spicedb_postgres
    image: postgres:16.1
    restart: always
    environment:
      POSTGRES_DB: spicedb
      POSTGRES_USER: spicedb
      POSTGRES_PASSWORD: spicedb123
    volumes:
      - ./postgres/spicedb:/var/lib/postgresql/data
    ports:
      - 5436:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spicedb"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  air_config: # air_config ボリュームを定義
